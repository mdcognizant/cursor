# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc
import warnings

import agent_service_pb2 as agent__service__pb2

GRPC_GENERATED_VERSION = '1.74.0'
GRPC_VERSION = grpc.__version__
_version_not_supported = False

try:
    from grpc._utilities import first_version_is_lower
    _version_not_supported = first_version_is_lower(GRPC_VERSION, GRPC_GENERATED_VERSION)
except ImportError:
    _version_not_supported = True

if _version_not_supported:
    raise RuntimeError(
        f'The grpc package installed is at version {GRPC_VERSION},'
        + f' but the generated code in agent_service_pb2_grpc.py depends on'
        + f' grpcio>={GRPC_GENERATED_VERSION}.'
        + f' Please upgrade your grpc module to grpcio>={GRPC_GENERATED_VERSION}'
        + f' or downgrade your generated code using grpcio-tools<={GRPC_VERSION}.'
    )


class AgentCommunicationServiceStub(object):
    """Agent Communication Service
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.SendMessage = channel.unary_unary(
                '/llm_agent_bridge.AgentCommunicationService/SendMessage',
                request_serializer=agent__service__pb2.SendMessageRequest.SerializeToString,
                response_deserializer=agent__service__pb2.SendMessageResponse.FromString,
                _registered_method=True)
        self.SendMessageStream = channel.unary_stream(
                '/llm_agent_bridge.AgentCommunicationService/SendMessageStream',
                request_serializer=agent__service__pb2.SendMessageRequest.SerializeToString,
                response_deserializer=agent__service__pb2.MessageChunk.FromString,
                _registered_method=True)
        self.Communicate = channel.stream_stream(
                '/llm_agent_bridge.AgentCommunicationService/Communicate',
                request_serializer=agent__service__pb2.CommunicationRequest.SerializeToString,
                response_deserializer=agent__service__pb2.CommunicationResponse.FromString,
                _registered_method=True)
        self.GetAgentStatus = channel.unary_unary(
                '/llm_agent_bridge.AgentCommunicationService/GetAgentStatus',
                request_serializer=agent__service__pb2.GetAgentStatusRequest.SerializeToString,
                response_deserializer=agent__service__pb2.AgentStatusResponse.FromString,
                _registered_method=True)
        self.ListAgents = channel.unary_unary(
                '/llm_agent_bridge.AgentCommunicationService/ListAgents',
                request_serializer=agent__service__pb2.ListAgentsRequest.SerializeToString,
                response_deserializer=agent__service__pb2.ListAgentsResponse.FromString,
                _registered_method=True)
        self.SubscribeToEvents = channel.unary_stream(
                '/llm_agent_bridge.AgentCommunicationService/SubscribeToEvents',
                request_serializer=agent__service__pb2.SubscribeEventsRequest.SerializeToString,
                response_deserializer=agent__service__pb2.AgentEvent.FromString,
                _registered_method=True)


class AgentCommunicationServiceServicer(object):
    """Agent Communication Service
    """

    def SendMessage(self, request, context):
        """Send a message to an agent
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SendMessageStream(self, request, context):
        """Send a message and stream the response
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Communicate(self, request_iterator, context):
        """Establish a bidirectional communication channel
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetAgentStatus(self, request, context):
        """Get agent status and health
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ListAgents(self, request, context):
        """List available agents
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SubscribeToEvents(self, request, context):
        """Subscribe to agent events
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_AgentCommunicationServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'SendMessage': grpc.unary_unary_rpc_method_handler(
                    servicer.SendMessage,
                    request_deserializer=agent__service__pb2.SendMessageRequest.FromString,
                    response_serializer=agent__service__pb2.SendMessageResponse.SerializeToString,
            ),
            'SendMessageStream': grpc.unary_stream_rpc_method_handler(
                    servicer.SendMessageStream,
                    request_deserializer=agent__service__pb2.SendMessageRequest.FromString,
                    response_serializer=agent__service__pb2.MessageChunk.SerializeToString,
            ),
            'Communicate': grpc.stream_stream_rpc_method_handler(
                    servicer.Communicate,
                    request_deserializer=agent__service__pb2.CommunicationRequest.FromString,
                    response_serializer=agent__service__pb2.CommunicationResponse.SerializeToString,
            ),
            'GetAgentStatus': grpc.unary_unary_rpc_method_handler(
                    servicer.GetAgentStatus,
                    request_deserializer=agent__service__pb2.GetAgentStatusRequest.FromString,
                    response_serializer=agent__service__pb2.AgentStatusResponse.SerializeToString,
            ),
            'ListAgents': grpc.unary_unary_rpc_method_handler(
                    servicer.ListAgents,
                    request_deserializer=agent__service__pb2.ListAgentsRequest.FromString,
                    response_serializer=agent__service__pb2.ListAgentsResponse.SerializeToString,
            ),
            'SubscribeToEvents': grpc.unary_stream_rpc_method_handler(
                    servicer.SubscribeToEvents,
                    request_deserializer=agent__service__pb2.SubscribeEventsRequest.FromString,
                    response_serializer=agent__service__pb2.AgentEvent.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'llm_agent_bridge.AgentCommunicationService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('llm_agent_bridge.AgentCommunicationService', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class AgentCommunicationService(object):
    """Agent Communication Service
    """

    @staticmethod
    def SendMessage(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/llm_agent_bridge.AgentCommunicationService/SendMessage',
            agent__service__pb2.SendMessageRequest.SerializeToString,
            agent__service__pb2.SendMessageResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def SendMessageStream(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(
            request,
            target,
            '/llm_agent_bridge.AgentCommunicationService/SendMessageStream',
            agent__service__pb2.SendMessageRequest.SerializeToString,
            agent__service__pb2.MessageChunk.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def Communicate(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_stream(
            request_iterator,
            target,
            '/llm_agent_bridge.AgentCommunicationService/Communicate',
            agent__service__pb2.CommunicationRequest.SerializeToString,
            agent__service__pb2.CommunicationResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetAgentStatus(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/llm_agent_bridge.AgentCommunicationService/GetAgentStatus',
            agent__service__pb2.GetAgentStatusRequest.SerializeToString,
            agent__service__pb2.AgentStatusResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def ListAgents(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/llm_agent_bridge.AgentCommunicationService/ListAgents',
            agent__service__pb2.ListAgentsRequest.SerializeToString,
            agent__service__pb2.ListAgentsResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def SubscribeToEvents(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(
            request,
            target,
            '/llm_agent_bridge.AgentCommunicationService/SubscribeToEvents',
            agent__service__pb2.SubscribeEventsRequest.SerializeToString,
            agent__service__pb2.AgentEvent.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)


class AgentManagementServiceStub(object):
    """Agent Management Service
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.CreateAgent = channel.unary_unary(
                '/llm_agent_bridge.AgentManagementService/CreateAgent',
                request_serializer=agent__service__pb2.CreateAgentRequest.SerializeToString,
                response_deserializer=agent__service__pb2.CreateAgentResponse.FromString,
                _registered_method=True)
        self.UpdateAgent = channel.unary_unary(
                '/llm_agent_bridge.AgentManagementService/UpdateAgent',
                request_serializer=agent__service__pb2.UpdateAgentRequest.SerializeToString,
                response_deserializer=agent__service__pb2.UpdateAgentResponse.FromString,
                _registered_method=True)
        self.RemoveAgent = channel.unary_unary(
                '/llm_agent_bridge.AgentManagementService/RemoveAgent',
                request_serializer=agent__service__pb2.RemoveAgentRequest.SerializeToString,
                response_deserializer=agent__service__pb2.RemoveAgentResponse.FromString,
                _registered_method=True)
        self.GetAgentConfig = channel.unary_unary(
                '/llm_agent_bridge.AgentManagementService/GetAgentConfig',
                request_serializer=agent__service__pb2.GetAgentConfigRequest.SerializeToString,
                response_deserializer=agent__service__pb2.GetAgentConfigResponse.FromString,
                _registered_method=True)


class AgentManagementServiceServicer(object):
    """Agent Management Service
    """

    def CreateAgent(self, request, context):
        """Create or register a new agent
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UpdateAgent(self, request, context):
        """Update agent configuration
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def RemoveAgent(self, request, context):
        """Remove an agent
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetAgentConfig(self, request, context):
        """Get agent configuration
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_AgentManagementServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'CreateAgent': grpc.unary_unary_rpc_method_handler(
                    servicer.CreateAgent,
                    request_deserializer=agent__service__pb2.CreateAgentRequest.FromString,
                    response_serializer=agent__service__pb2.CreateAgentResponse.SerializeToString,
            ),
            'UpdateAgent': grpc.unary_unary_rpc_method_handler(
                    servicer.UpdateAgent,
                    request_deserializer=agent__service__pb2.UpdateAgentRequest.FromString,
                    response_serializer=agent__service__pb2.UpdateAgentResponse.SerializeToString,
            ),
            'RemoveAgent': grpc.unary_unary_rpc_method_handler(
                    servicer.RemoveAgent,
                    request_deserializer=agent__service__pb2.RemoveAgentRequest.FromString,
                    response_serializer=agent__service__pb2.RemoveAgentResponse.SerializeToString,
            ),
            'GetAgentConfig': grpc.unary_unary_rpc_method_handler(
                    servicer.GetAgentConfig,
                    request_deserializer=agent__service__pb2.GetAgentConfigRequest.FromString,
                    response_serializer=agent__service__pb2.GetAgentConfigResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'llm_agent_bridge.AgentManagementService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('llm_agent_bridge.AgentManagementService', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class AgentManagementService(object):
    """Agent Management Service
    """

    @staticmethod
    def CreateAgent(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/llm_agent_bridge.AgentManagementService/CreateAgent',
            agent__service__pb2.CreateAgentRequest.SerializeToString,
            agent__service__pb2.CreateAgentResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def UpdateAgent(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/llm_agent_bridge.AgentManagementService/UpdateAgent',
            agent__service__pb2.UpdateAgentRequest.SerializeToString,
            agent__service__pb2.UpdateAgentResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def RemoveAgent(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/llm_agent_bridge.AgentManagementService/RemoveAgent',
            agent__service__pb2.RemoveAgentRequest.SerializeToString,
            agent__service__pb2.RemoveAgentResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetAgentConfig(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/llm_agent_bridge.AgentManagementService/GetAgentConfig',
            agent__service__pb2.GetAgentConfigRequest.SerializeToString,
            agent__service__pb2.GetAgentConfigResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)


class TaskOrchestrationServiceStub(object):
    """Task Orchestration Service
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.ExecuteTask = channel.unary_unary(
                '/llm_agent_bridge.TaskOrchestrationService/ExecuteTask',
                request_serializer=agent__service__pb2.ExecuteTaskRequest.SerializeToString,
                response_deserializer=agent__service__pb2.ExecuteTaskResponse.FromString,
                _registered_method=True)
        self.ExecuteTaskStream = channel.unary_stream(
                '/llm_agent_bridge.TaskOrchestrationService/ExecuteTaskStream',
                request_serializer=agent__service__pb2.ExecuteTaskRequest.SerializeToString,
                response_deserializer=agent__service__pb2.TaskUpdate.FromString,
                _registered_method=True)
        self.GetTaskStatus = channel.unary_unary(
                '/llm_agent_bridge.TaskOrchestrationService/GetTaskStatus',
                request_serializer=agent__service__pb2.GetTaskStatusRequest.SerializeToString,
                response_deserializer=agent__service__pb2.TaskStatusResponse.FromString,
                _registered_method=True)
        self.CancelTask = channel.unary_unary(
                '/llm_agent_bridge.TaskOrchestrationService/CancelTask',
                request_serializer=agent__service__pb2.CancelTaskRequest.SerializeToString,
                response_deserializer=agent__service__pb2.CancelTaskResponse.FromString,
                _registered_method=True)


class TaskOrchestrationServiceServicer(object):
    """Task Orchestration Service
    """

    def ExecuteTask(self, request, context):
        """Execute a task across multiple agents
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ExecuteTaskStream(self, request, context):
        """Execute a task with streaming updates
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetTaskStatus(self, request, context):
        """Get task status
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CancelTask(self, request, context):
        """Cancel a running task
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_TaskOrchestrationServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'ExecuteTask': grpc.unary_unary_rpc_method_handler(
                    servicer.ExecuteTask,
                    request_deserializer=agent__service__pb2.ExecuteTaskRequest.FromString,
                    response_serializer=agent__service__pb2.ExecuteTaskResponse.SerializeToString,
            ),
            'ExecuteTaskStream': grpc.unary_stream_rpc_method_handler(
                    servicer.ExecuteTaskStream,
                    request_deserializer=agent__service__pb2.ExecuteTaskRequest.FromString,
                    response_serializer=agent__service__pb2.TaskUpdate.SerializeToString,
            ),
            'GetTaskStatus': grpc.unary_unary_rpc_method_handler(
                    servicer.GetTaskStatus,
                    request_deserializer=agent__service__pb2.GetTaskStatusRequest.FromString,
                    response_serializer=agent__service__pb2.TaskStatusResponse.SerializeToString,
            ),
            'CancelTask': grpc.unary_unary_rpc_method_handler(
                    servicer.CancelTask,
                    request_deserializer=agent__service__pb2.CancelTaskRequest.FromString,
                    response_serializer=agent__service__pb2.CancelTaskResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'llm_agent_bridge.TaskOrchestrationService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('llm_agent_bridge.TaskOrchestrationService', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class TaskOrchestrationService(object):
    """Task Orchestration Service
    """

    @staticmethod
    def ExecuteTask(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/llm_agent_bridge.TaskOrchestrationService/ExecuteTask',
            agent__service__pb2.ExecuteTaskRequest.SerializeToString,
            agent__service__pb2.ExecuteTaskResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def ExecuteTaskStream(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(
            request,
            target,
            '/llm_agent_bridge.TaskOrchestrationService/ExecuteTaskStream',
            agent__service__pb2.ExecuteTaskRequest.SerializeToString,
            agent__service__pb2.TaskUpdate.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetTaskStatus(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/llm_agent_bridge.TaskOrchestrationService/GetTaskStatus',
            agent__service__pb2.GetTaskStatusRequest.SerializeToString,
            agent__service__pb2.TaskStatusResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def CancelTask(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/llm_agent_bridge.TaskOrchestrationService/CancelTask',
            agent__service__pb2.CancelTaskRequest.SerializeToString,
            agent__service__pb2.CancelTaskResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
