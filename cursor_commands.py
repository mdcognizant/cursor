#!/usr/bin/env python3
"""
üöÄ CURSOR COMMAND INTERPRETER FOR NASA SERVER

Recognizes natural language commands and executes appropriate actions:
- "run nasa server" ‚Üí Launch NASA server
- "run nasa server with mcp and grpc" ‚Üí Launch full MCP+gRPC server
- "open nasa server" ‚Üí Launch NASA server
- "start nasa server" ‚Üí Launch NASA server
- "nasa server" ‚Üí Launch NASA server

Usage in Cursor:
1. User types: "run nasa server"
2. Cursor executes: python cursor_commands.py "run nasa server"
3. Script launches appropriate NASA server
"""

import sys
import subprocess
import os
import re
from typing import List, Tuple, Optional

def print_banner():
    """Print Cursor command interpreter banner."""
    print("ü§ñ CURSOR NASA SERVER COMMAND INTERPRETER")
    print("=" * 50)

def normalize_command(command: str) -> str:
    """Normalize command to lowercase and remove extra spaces."""
    return re.sub(r'\s+', ' ', command.lower().strip())

def parse_nasa_command(command: str) -> Tuple[str, bool, bool]:
    """
    Parse NASA server command and return action type and options.
    
    Returns:
        Tuple[action, use_mcp_grpc, is_minimal]
    """
    normalized = normalize_command(command)
    
    # Check for MCP and gRPC keywords
    has_mcp = any(keyword in normalized for keyword in ['mcp', 'grpc', 'grpc', 'full'])
    has_minimal = any(keyword in normalized for keyword in ['minimal', 'simple', 'basic'])
    
    # Determine action type
    if any(keyword in normalized for keyword in ['run', 'start', 'launch', 'open', 'execute']):
        action = 'launch'
    elif any(keyword in normalized for keyword in ['stop', 'kill', 'terminate']):
        action = 'stop'
    elif any(keyword in normalized for keyword in ['status', 'check', 'health']):
        action = 'status'
    elif any(keyword in normalized for keyword in ['help', 'commands']):
        action = 'help'
    else:
        action = 'launch'  # Default action
    
    return action, has_mcp, has_minimal

def execute_nasa_command(action: str, use_mcp_grpc: bool, is_minimal: bool) -> int:
    """Execute the appropriate NASA server command."""
    
    if action == 'launch':
        print(f"üöÄ Launching NASA Server...")
        if use_mcp_grpc:
            print("‚úÖ Using full MCP+gRPC architecture")
            return launch_mcp_grpc_server()
        elif is_minimal:
            print("‚úÖ Using minimal server (no dependencies)")
            return launch_minimal_server()
        else:
            print("‚úÖ Using automatic server selection")
            return launch_auto_server()
    
    elif action == 'stop':
        print("üõë Stopping NASA Server...")
        return stop_nasa_server()
    
    elif action == 'status':
        print("üìä Checking NASA Server status...")
        return check_nasa_status()
    
    elif action == 'help':
        print_nasa_help()
        return 0
    
    else:
        print(f"‚ùå Unknown action: {action}")
        return 1

def launch_auto_server():
    """Launch the full NASA MCP gRPC server automatically."""
    print("\nüöÄ AUTO-LAUNCHING NASA MCP gRPC SERVER")
    print("=" * 50)
    print("üßÆ Full NASA Mathematical Optimizations")
    print("üè¢ Enterprise MCP gRPC Architecture Only")
    print("üö´ NO FALLBACK - NASA Enhanced Only")
    print("=" * 50)
    
    # Only use the full NASA MCP gRPC server
    nasa_server = "nasa_polygon_universal_bridge_server.py"
    
    if not os.path.exists(nasa_server):
        print(f"‚ùå NASA MCP gRPC server not found: {nasa_server}")
        print("üö´ Full NASA MCP gRPC architecture required")
        return False
    
    print(f"üåå Auto-launching: {nasa_server}")
    
    try:
        # Start in background for auto mode
        import subprocess
        process = subprocess.Popen([sys.executable, nasa_server])
        print(f"‚úÖ NASA MCP gRPC server started (PID: {process.pid})")
        return True
    except Exception as e:
        print(f"‚ùå Error auto-launching: {e}")
        print("üö´ NO FALLBACK - NASA MCP gRPC required")
        return False

def launch_mcp_grpc_server() -> int:
    """Launch full MCP+gRPC NASA server."""
    try:
        if os.path.exists('nasa_mcp_grpc_polygon_launcher.py'):
            print("üéØ Launching full MCP+gRPC NASA server")
            return subprocess.call([sys.executable, 'nasa_mcp_grpc_polygon_launcher.py'])
        elif os.path.exists('nasa_polygon_universal_bridge_server.py'):
            print("üéØ Launching NASA universal bridge server")
            return subprocess.call([sys.executable, 'nasa_polygon_universal_bridge_server.py'])
        else:
            print("‚ö†Ô∏è MCP+gRPC server not found, using standard NASA server")
            return launch_auto_server()
    except Exception as e:
        print(f"‚ùå Error launching MCP+gRPC server: {e}")
        return 1

def launch_minimal_server() -> int:
    """Launch minimal NASA server."""
    try:
        print("üéØ Launching minimal NASA server")
        return subprocess.call([sys.executable, 'run_nasa_server.py', '--minimal'])
    except Exception as e:
        print(f"‚ùå Error launching minimal server: {e}")
        return 1

def stop_nasa_server() -> int:
    """Stop NASA server (basic implementation)."""
    try:
        # Try to find and kill NASA server processes
        if os.name == 'nt':  # Windows
            subprocess.call(['taskkill', '/f', '/im', 'python.exe', '/fi', 'WINDOWTITLE eq NASA*'], 
                          stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)
        else:  # Linux/Mac
            subprocess.call(['pkill', '-f', 'nasa.*server'], 
                          stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)
        
        print("‚úÖ NASA server stop signal sent")
        return 0
    except Exception as e:
        print(f"‚ö†Ô∏è Could not stop server automatically: {e}")
        print("üí° Use Ctrl+C in the server terminal to stop manually")
        return 1

def check_nasa_status() -> int:
    """Check NASA server status."""
    try:
        import urllib.request
        import urllib.error
        
        # Try to connect to NASA server
        try:
            with urllib.request.urlopen('http://localhost:8001/health', timeout=5) as response:
                if response.status == 200:
                    print("‚úÖ NASA server is running on port 8001")
                    return 0
        except urllib.error.URLError:
            pass
        
        # Try alternative ports
        for port in [8000, 8002, 8080]:
            try:
                with urllib.request.urlopen(f'http://localhost:{port}/health', timeout=2) as response:
                    if response.status == 200:
                        print(f"‚úÖ NASA server found running on port {port}")
                        return 0
            except urllib.error.URLError:
                continue
        
        print("‚ùå NASA server not running or not responding")
        print("üí° Run: python cursor_commands.py 'run nasa server'")
        return 1
        
    except Exception as e:
        print(f"‚ö†Ô∏è Error checking server status: {e}")
        return 1

def print_nasa_help():
    """Print available NASA server commands."""
    print("""
ü§ñ CURSOR NASA SERVER COMMANDS

Natural Language Commands:
  "run nasa server"                    ‚Üí Launch NASA server (auto-detect)
  "run nasa server with mcp and grpc" ‚Üí Launch full MCP+gRPC server  
  "run nasa server minimal"           ‚Üí Launch minimal server
  "open nasa server"                  ‚Üí Launch NASA server
  "start nasa server"                 ‚Üí Launch NASA server
  "stop nasa server"                  ‚Üí Stop NASA server
  "nasa server status"                ‚Üí Check server status
  "nasa server help"                  ‚Üí Show this help

Direct Commands:
  python cursor_commands.py "run nasa server"
  python cursor_commands.py "run nasa server with mcp and grpc"
  python cursor_commands.py "stop nasa server"
  python cursor_commands.py "nasa server status"

Server Endpoints (when running):
  http://localhost:8001/health         ‚Üí Health check
  http://localhost:8001/nasa-trigger   ‚Üí Trigger optimizations
  http://localhost:8001/nasa-metrics   ‚Üí Performance metrics

üéØ NASA Performance: 411x service discovery, 53x circuit breaker, 8.5x JSON processing
""")

def main():
    """Main entry point for Cursor command interpreter."""
    if len(sys.argv) < 2:
        print_banner()
        print("‚ùå No command provided")
        print("üí° Usage: python cursor_commands.py \"run nasa server\"")
        print("üí° Or: python cursor_commands.py --help")
        return 1
    
    command = ' '.join(sys.argv[1:])
    
    if command.lower() in ['--help', '-h', 'help']:
        print_banner()
        print_nasa_help()
        return 0
    
    print_banner()
    print(f"üìù Command: {command}")
    
    # Parse the command
    action, use_mcp_grpc, is_minimal = parse_nasa_command(command)
    
    print(f"üéØ Action: {action}")
    if use_mcp_grpc:
        print("üîß Mode: Full MCP+gRPC")
    elif is_minimal:
        print("üîß Mode: Minimal")
    else:
        print("üîß Mode: Auto-detect")
    
    print("-" * 50)
    
    # Execute the command
    return execute_nasa_command(action, use_mcp_grpc, is_minimal)

if __name__ == "__main__":
    try:
        exit(main())
    except KeyboardInterrupt:
        print("\n‚ö†Ô∏è Command interrupted by user")
        exit(1)
    except Exception as e:
        print(f"\n‚ùå Unexpected error: {e}")
        exit(1) 